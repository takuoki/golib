package grpc_requestlog_test

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"sync"
	"testing"

	grpc_testing "github.com/grpc-ecosystem/go-grpc-middleware/testing"
	pb_testproto "github.com/grpc-ecosystem/go-grpc-middleware/testing/testproto"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/takuoki/golib/appctx"
	"github.com/takuoki/golib/applog"
	grpc_requestlog "github.com/takuoki/golib/middleware/grpc/requestlog"
)

type assertingPingService struct {
	pb_testproto.TestServiceServer
}

func TestRequestLogTestSuite(t *testing.T) {
	buf := &bytes.Buffer{}
	s := &RequestLogTestSuite{
		InterceptorTestSuite: &grpc_testing.InterceptorTestSuite{
			TestService: &assertingPingService{&grpc_testing.TestPingService{T: t}},
			ServerOpts: []grpc.ServerOption{
				grpc.UnaryInterceptor(grpc_requestlog.UnaryServerInterceptor(
					newTestLogger(buf),
					grpc_requestlog.RequestIDKey("req-id"),
					grpc_requestlog.RequestIDFunc(func() (string, error) { return "auto-generated-id", nil }),
				)),
			},
		},
		buf: buf,
	}
	suite.Run(t, s)
}

type RequestLogTestSuite struct {
	*grpc_testing.InterceptorTestSuite
	buf *bytes.Buffer
}

func (s *RequestLogTestSuite) TestUnary_AutoGeneratedID() {
	s.buf.Reset()
	_, _ = s.Client.Ping(s.SimpleCtx(), &pb_testproto.PingRequest{Value: "something", SleepTimeMs: 9999})
	assert.Regexp(
		s.T(),
		`^{"message":"request log","request_id":"auto-generated-id","labels":{"content_type":"application/grpc","ip_address":"127.0.0.1:[0-9]+","service_method":"/mwitkow.testproto.TestService/Ping","user_agent":"grpc-go/.+"}}`+"\n$",
		s.buf.String(),
	)
}

func (s *RequestLogTestSuite) TestUnary_MetadataID() {
	s.buf.Reset()

	ctx := s.SimpleCtx()
	md := metadata.New(map[string]string{
		"req-id": "metadata-id",
	})
	ctx = metadata.NewOutgoingContext(ctx, md)

	_, _ = s.Client.Ping(ctx, &pb_testproto.PingRequest{Value: "something", SleepTimeMs: 9999})
	assert.Regexp(
		s.T(),
		`^{"message":"request log","request_id":"metadata-id","labels":{"content_type":"application/grpc","ip_address":"127.0.0.1:[0-9]+","service_method":"/mwitkow.testproto.TestService/Ping","user_agent":"grpc-go/.+"}}`+"\n$",
		s.buf.String(),
	)
}

func newTestLogger(w io.Writer) applog.Logger {
	return &testLogger{
		out: w,
	}
}

type testLogger struct {
	applog.Logger
	mu  sync.Mutex
	out io.Writer
}

type testLog struct {
	Message   string            `json:"message"`
	RequestID string            `json:"request_id,omitempty"`
	Labels    map[string]string `json:"labels,omitempty"`
}

func (l *testLogger) Print(ctx context.Context, lv applog.Level, msg string, labels map[string]string) {

	log := testLog{
		Message:   msg,
		RequestID: appctx.RequestID(ctx),
		Labels:    labels,
	}
	jsonLog, _ := json.Marshal(log)

	l.mu.Lock()
	defer l.mu.Unlock()
	fmt.Fprintln(l.out, string(jsonLog))
}
